@startuml name
title クラス図



Folder Model{
    Folder PlayerModel  {
        class PlayerMove {
            IReadOnlyReactiveProperty<bool> OnChangeIsJumping
            IReadOnlyReactiveProperty<bool> OnChangeIsFalling
            IReadOnlyReactiveProperty<bool> OnChangeIsWalking
            IReadOnlyReactiveProperty<bool> OnChangeIsDashing
            IReadOnlyReactiveProperty<bool> OnChangeIsCrouching
            void ReceaiveShift()
            void Move()
            void Jump()
            void Crounch()
        }
        class PlayerAttack {
            IObservable<string> OnAttack
            void Attack()
        }
        class Player{
            IObservable<string> OnDeath
            IObservable<string> OnHurt
            int _hp
            int _ATK
            Vector3 _position
            void Damage()
            void Heal()
        }
        class PlayerStatus{
            int HP
            Vector3 Position
            bool IsWlaking
            bool IsDash
            bool IsAttacking
        }
    }
    Folder EnemyModel{
        class EnemyMove {
            void Walk()
        }
        class EnemyAttack {
            int _ATK
            void Attack()
        }
        class EnemyHP {
            int HP
            void Damage()
        }
        class EnemyStatus{
            int HP
            Vector3 Position
            bool IsWlaking
            bool IsAttacking
        }
    }

    Folder BossModel{
        class BossMove {
            void Walk()
        }
        class BossAttack1 {
            int _ATK
            void Attack()
        }
        class BossAttack2 {
            int _ATK
            void Attack()
        }
        class BossHP {
            event Action OnClear
            int HP
            void Damage()
        }
        class BossStatus{
            int HP
            Vector3 Position
            bool IsWlaking
            bool IsAttacking
        }
    }   
    Folder ManagerModel  {
        class Failed {
            void GameOver()
        }
        class Clear {
            void GameClear()
        }

        class SwitchBGM {
            void PlayBGM(String BGM_name)
        }
        class CalcProgres{
            void CalcRatio()
        }
}
}



Folder Presenter{
class InputPresenter{
    view から model
    OnDownKey --> Attack(), Jump()
    OnDownSKey --> Crounch()
    OnDownHorizontalKey --> Move()
}
class PlayerPresenter{
    model から view
    OnChange~ --> SetAnimator()
    OnAttack --> SetAnimatorTrigger()

}
}




Folder View{
    class InputView{
         IObservable<string> OnDownKey
         IObservable<bool> OnDownSKey
         IObservable<float> OnDownHorizontalKey
         IReadOnlyReactiveProperty<bool> OnDownShiftKey    
    }

    class PlayerView{
        void SetAnimator()
        void SetAnimatorTrigger()
    }

    Folder Camera  {
        class CameraMove {
            void Move()
        }
        class CameraRenderer {
            void OnBecameVisible()
        }
    }



    Folder GUI {
        class GameRestart{
            void PushButton()
        }
        class GameStop{
            void PushButton()
        }
        class GameQuit{
            void PushButton()
        }
    }
}

Folder Sound {
    class PlaySE{

    }
}

class SoundPresentor{

}


interface IApplyDamage{
    void Damage(int ATK);
}

interface IButtonPush{
    void PushButton();
}


EnemyAttack ..up> IApplyDamage
BossAttack1 ..up> IApplyDamage
BossAttack2 ..up> IApplyDamage

GameRestart ..> IButtonPush
GameStop ..>  IButtonPush
GameQuit ..>  IButtonPush

EnemyHP ..up|> IApplyDamage
BossHP ..up|> IApplyDamage
Player ..up|> IApplyDamage
PlayerAttack --> IApplyDamage

InputPresenter --> InputView
InputPresenter --> PlayerMove
InputPresenter --> PlayerAttack

PlayerPresenter --> Player
PlayerPresenter --> PlayerMove
PlayerPresenter --> PlayerAttack

PlayerPresenter --> PlayerView


' PlayerStatus --> PlayerAttack
' PlayerStatus --> PlayerMove

@enduml